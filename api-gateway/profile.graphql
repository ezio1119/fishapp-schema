extend type Query {
  profile(Id: ID!): Profile! 
}

extend type Mutation {
  createProfile(input: CreateProfileInput!): CreateProfilePayload! @isAuthenticated
  deleteProfile(input: DeleteProfileInput!): DeleteProfilePayload! @isAuthenticated
  updateProfile(input: UpdateProfileInput!): UpdateProfilePayload! @isAuthenticated
}

enum Sex {
  MALE
  FEMALE
}

type Profile {
  id: ID!
  name: String!
  introduction: String!
  age: Int!
  sex: Sex!
  userId: ID!
  created_at: Time!
  updated_at: Time!
}

input CreateProfileInput {
  name: String!
  introduction: String!
  age: Int!
  sex: Sex!
}

type CreateProfilePayload {
  profile: Profile!
}

type DeleteProfileInput {
  id: ID!
}

type DeleteProfilePayload {
  success: Boolean!
}

input UpdateProfileInput {
  id: ID!
  name: String!
  introduction: String!
}

type UpdateProfilePayload {
  profile: Profile!
}