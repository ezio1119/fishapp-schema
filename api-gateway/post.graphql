scalar Time

extend type Query {
  posts(first: Int, after: String, input: PostsInput!): PostConnection! # Relay connection
  post(id: ID!): Post!
}

extend type Mutation {
  createPost(input: CreatePostInput!): CreatePostPayload! @isAuthenticated
  updatePost(input: UpdatePostInput!): UpdatePostPayload! @isAuthenticated
  deletePost(input: DeletePostInput!): DeletePostPayload! @isAuthenticated
  createApplyPost(input: CreateApplyPostInput!): CreateApplyPostPayload! @isAuthenticated
  deleteApplyPost(input: DeleteApplyPostInput!): DeleteApplyPostPayload! @isAuthenticated
}

extend type Post {
  id: ID!
  title: String! # DBは255文字まで(任せます)
  content: String! # DBは5000文字まで(任せます)
  fishingSpotType: Int! # 陸っぱり, 渓流, 釣り船, 釣り堀
  fishTypes: [Int!]! # 釣果サイトに乗ってる魚種
  prefecture: String! # Google Place API のレスポンスのadministrative_area_level_1を入れる(サーバーで叩きたくないから)
  meetingPlace: String! # Google Place ID
  meetingTime: Time!
  maxApply: Int!
  applyPost: [ApplyPost!]
  userId: ID!
  createdAt: Time!
  updatedAt: Time!
}



type ApplyPost {
  id: ID!
  userId: ID!
  postId: ID!
  createdAt: Time!
  updatedAt: Time!
}

input PostsInput {
  notImplement: String
}

extend type PageInfo {
  hasNextPage: Boolean!
  endCursor: String
}

type PostConnection {
  pageInfo: PageInfo!
  nodes: [Post!]
}

input CreatePostInput {
  title: String!
  content: String!
  fishingSpotType: Int!
  fishType: [Int!]!
  prefecture: String!
  meetingPlace: String!
  meetingTime: Time!
  maxApply: Int!
}

type CreatePostPayload {
  post: Post!
}

input UpdatePostInput{
  id: ID!
  title: String!
  content: String!
  fishType: [Int!]!
  fishingSpotType: Int!
  meetingPlace: String!
  meetingTime: Time!
  maxApply: Int!
}

type UpdatePostPayload {
  success: Boolean!
}

input DeletePostInput{
  id: ID!
}

type DeletePostPayload {
  success: Boolean!
}

input CreateApplyPostInput {
  postId: ID!
}

type CreateApplyPostPayload {
  applyPost: ApplyPost!
}

input DeleteApplyPostInput {
  applyPostId: ID!
}

type DeleteApplyPostPayload {
  success: Boolean!
}