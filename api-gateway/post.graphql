scalar Time

extend type Query {
  posts(first: Int, after: String, input: PostsInput!): PostConnection! # Relay connection
  post(id: ID!): Post!
}

extend type Mutation {
  createPost(input: CreatePostInput!): CreatePostPayload! @isAuthenticated
  updatePost(input: UpdatePostInput!): UpdatePostPayload! @isAuthenticated
  deletePost(input: DeletePostInput!): DeletePostPayload! @isAuthenticated
  createApplyPost(input: CreateApplyPostInput!): CreateApplyPostPayload! @isAuthenticated
  deleteApplyPost(input: DeleteApplyPostInput!): DeleteApplyPostPayload! @isAuthenticated
}

extend type Post {
  id: ID!
  title: String!
  content: String!
  fishingSpotTypeId: ID!
  fishTypeIds: [ID!]!
  prefectureId: ID!
  meetingPlaceId: String! 
  meetingAt: Time!
  applyPosts: [ApplyPost!]
  user: User!
  maxApply: Int!
  createdAt: Time!
  updatedAt: Time!
}

type ApplyPost {
  id: ID!
  user: User!
  post: Post!
  createdAt: Time!
  updatedAt: Time!
}

input PostsInput {
  prefectureId: ID
  fishingSpotTypeId: ID
  fishTypeIds: [ID!]
  meetingAtFrom: Time
  meetingAtTo: Time
  orderBy: PostOrderBy!
  sortBy: PostSortBy!
  userId: ID #ここに値が入っているとユーザーの投稿を絞り込める
}

enum PostOrderBy {
  ASC
  DESC
}

enum PostSortBy {
  CREATED_AT
  MEETING_AT
}

extend type PageInfo {
  hasNextPage: Boolean!
  endCursor: String
}

type PostConnection {
  pageInfo: PageInfo!
  nodes: [Post!]
}

input CreatePostInput {
  title: String!
  content: String!
  fishingSpotTypeId: ID!
  fishTypeIds: [ID!]!
  prefectureId: ID! # 普通に選ばせる or Google Place API のレスポンスのadministrative_area_level_1と取ってきたIDを比較する
  meetingPlaceId: String! # Google Place ID
  meetingAt: Time!
  maxApply: Int!
}

type CreatePostPayload {
  post: Post!
}

input UpdatePostInput{
  id: ID!
  title: String!
  content: String!
  fishingSpotTypeId: ID!
  fishTypeIds: [ID!]!
  prefectureId: ID!
  meetingPlaceId: String!
  meetingAt: Time!
  maxApply: Int!
}

type UpdatePostPayload {
  post: Post!
}

input DeletePostInput{
  id: ID!
}

type DeletePostPayload {
  success: Boolean!
}

input CreateApplyPostInput {
  postId: ID!
}

type CreateApplyPostPayload {
  applyPost: ApplyPost!
}

input DeleteApplyPostInput {
  applyPostId: ID!
}

type DeleteApplyPostPayload {
  success: Boolean!
}