directive @isAuthenticated(
  authAPI: Boolean! = false # Token is required when requesting authAPI
) on FIELD_DEFINITION

extend type Query {
  user(id: ID!): User!
}

extend type Mutation {
  createUser(input: CreateUserInput!): CreateUserPayload!
  deleteUser: DeleteUserPayload! @isAuthenticated(authAPI: true)
  updateUser(input: UpdateUserInput!): UpdateUserPayload! @isAuthenticated(authAPI: true)
  refreshIDToken: RefreshIDTokenPayload! @isAuthenticated(authAPI: true)
  login(input: LoginInput!): LoginPayload!
  logout: LogoutPayload! @isAuthenticated(authAPI: true)
}

extend type User {
  id: ID!
  email: String!
  posts: [Post!]
  applyPosts: [ApplyPost!]
  profile: Profile!
  createdAt: Time!
  updatedAt: Time!
}

input CreateUserInput {
  email: String!
  password: String! # 6文字以上72文字以下の英数字
}

type CreateUserPayload {
  user: User!
  tokenPair: TokenPair!
}

type DeleteUserPayload{
  success: Boolean!
}

input UpdateUserInput {
  email: String!
  password: String!
}

type UpdateUserPayload {
  user: User!
}

type RefreshIDTokenPayload{
  tokenPair: TokenPair!
}

type TokenPair {
  idToken: String!
  refreshToken: String!
}

input LoginInput {
  email: String!
  password: String!
}

type LoginPayload {
  user: User!
  tokenPair: TokenPair!
}

type LogoutPayload {
  success: Boolean!
}