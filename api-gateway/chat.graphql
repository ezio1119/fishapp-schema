extend type Query {
  roomMessages(roomId: ID!): [RoomMessage!]! @isAuthenticated
}

extend type Mutation {
  createChatRoom(input: CreateChatRoomInput!): CreateChatRoomPayload! @isAuthenticated
  addMemberChatRoom(input: AddMemberChatRoomInput!): AddMemberChatRoomPayload! @isAuthenticated 
  sendMessageChatRoom(input: SendMessageChatRoomInput!): SendMessageChatRoomPayload! @isAuthenticated
}

extend type Subscription {
  messageAdded(input: MessageAddedInput!): MessageAddedPayload! @isAuthenticated
}

extend type ChatRoom {
  id: ID!
  postId: ID!
  roomMember: [RoomMember!]!
  createdAt: Time!
  updatedAt: Time!
}

type RoomMember {
  id: ID!
  roomId: ID!
  userId: ID!
  createdAt: Time!
  updatedAt: Time!
}

type RoomMessage {
  id: ID!
  body: String!
  roomId: ID!
  userId: ID!
  createdAt: Time!
  updatedAt: Time!
}

input CreateChatRoomInput {
  postId: ID!
}

type CreateChatRoomPayload{
  room: ChatRoom!
}

input AddMemberChatRoomInput {
  roomId: ID!
}

type AddMemberChatRoomPayload {
  member: RoomMember!
}

# input SendMessageChatRoomInput {
#   body: String!
#   roomId: ID!
# }

# type SendMessageChatRoomPayload {
#   message: RoomMessage!
# }

# input MessageAddedInput {
#   roomIds: [ID!]!
# }

# type MessageAddedPayload {
#   message: RoomMessage!
# }