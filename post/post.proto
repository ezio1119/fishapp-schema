syntax = "proto3";
package post_grpc;
import "validate/validate.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";

service PostService {
  rpc GetPost(GetPostReq) returns (Post); // 投稿の詳細を取得
  rpc ListPosts(ListPostsReq) returns (ListPostsRes); // 投稿の絞り込み検索 & ページネーション
  rpc CreatePost(CreatePostReq) returns (Post); // 投稿を作成
  rpc UpdatePost(UpdatePostReq) returns (Post); // 投稿を更新
  rpc DeletePost(DeletePostReq) returns (google.protobuf.Empty); // 投稿を削除

  rpc ListApplyPosts(ListApplyPostsReq) returns (ListApplyPostsRes); // その投稿の応募情報を取得, そのユーザーの応募した投稿を取得
  rpc CreateApplyPost(CreateApplyPostReq) returns (ApplyPost); // ユーザーが投稿に応募する
  rpc DeleteApplyPost(DeleteApplyPostReq) returns (google.protobuf.Empty); // ユーザーがその投稿の応募を取り消す
}

message Post {
  int64 id = 1; 
  string title = 2;
  string content = 3;
  int64 fishing_spot_type_id = 4;
  repeated int64 fish_type_ids = 5;
  int64 prefecture_id = 6;
  string meeting_place_id = 7;
  google.protobuf.Timestamp meeting_at = 8;
  int64 user_id = 9;
  int64 max_apply = 10;
  google.protobuf.Timestamp created_at = 11;
  google.protobuf.Timestamp updated_at = 12;
}

message ApplyPost {
  int64 id = 1;
  int64 post_id = 2;
  int64 user_id = 3;
  google.protobuf.Timestamp created_at = 4;
  google.protobuf.Timestamp updated_at = 5;
}

message GetPostReq {
  int64 id = 1 [(validate.rules).int64.gte = 1];
}

message ListPostsReq {
  message Filter {
    int64 prefecture_id = 1;
    int64 fishing_spot_type_id = 2;
    repeated int64 fish_type_ids = 3;
    google.protobuf.Timestamp meeting_at_from = 4;
    google.protobuf.Timestamp meeting_at_to = 5;
    enum OrderBy {
      ORDER_BY_UNSPECIFIED = 0;
      ASC = 1;
      DESC = 2;
    }
    OrderBy order_by = 6;
    enum SortBy {
      SORT_BY_UNSPECIFIED = 0;
      CREATED_AT = 1;
      MEETING_AT = 2;
    }
    SortBy sort_by = 7;
    int64 user_id= 8; // ここに値が入っているとユーザーの投稿を絞り込める
  }
  Filter filter = 1;
  int64 page_size = 2;
  string page_token = 3;
}

message ListPostsRes {
  repeated Post posts = 1;
  string next_page_token = 2;
}

message CreatePostReq {
  string title = 1 [(validate.rules).string = {min_len: 1, max_len: 20}];
  string content = 2 [(validate.rules).string = {min_len: 1, max_len: 2000}];
  int64 fishing_spot_type_id = 3;
  repeated int64 fish_type_ids = 4;
  int64 prefecture_id = 5;
  string meeting_place_id = 6;
  google.protobuf.Timestamp meeting_at = 7;
  int64 max_apply = 8;
  int64 user_id= 9 [(validate.rules).int64.gte = 1]; // トークンに含まれていたidを受け取る
}

message UpdatePostReq  {
  int64 id = 1 [(validate.rules).int64.gte = 1];
  string title = 2 [(validate.rules).string = {min_len: 1, max_len: 20}];
  string content = 3 [(validate.rules).string = {min_len: 1, max_len: 2000}];
  int64 fishing_spot_type_id = 4;
  repeated int64 fish_type_ids = 5;
  int64 prefecture_id = 6;
  string meeting_place_id = 7;
  google.protobuf.Timestamp meeting_at = 8;
  int64 max_apply = 9;
  int64 user_id= 10 [(validate.rules).int64.gte = 1]; // トークンに含まれていたidを受け取る
}

message DeletePostReq {
  int64 id = 1 [(validate.rules).int64.gte = 1];
  int64 user_id= 2 [(validate.rules).int64.gte = 1];
}

message DeletePostRes {
  bool success = 1;
}

message ListApplyPostsReq {
  message Filter {
    int64 user_id = 1;
    int64 post_id = 2;
  }
}

message ListApplyPostsRes {
  repeated ApplyPost apply_posts = 1;
}

message CreateApplyPostReq {
  int64 post_id = 1 [(validate.rules).int64.gte = 1];
  int64 user_id= 2 [(validate.rules).int64.gte = 1];
}

message DeleteApplyPostReq {
  int64 id = 1 [(validate.rules).int64.gte = 1];
  int64 user_id = 2 [(validate.rules).int64.gte = 1];
}
