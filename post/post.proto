syntax = "proto3";
package post_grpc;
import "validate/validate.proto";
import "google/protobuf/timestamp.proto";


service PostService {
  rpc GetPostByID(GetPostByIDReq) returns (GetPostByIDRes); // 投稿の詳細を取得
  rpc GetPostByUserID(GetPostByUserIDReq) returns (GetPostByUserIDRes); // ユーザーの投稿を取得
  rpc GetListPosts(GetListPostsReq) returns (GetListPostsRes); // 投稿の絞り込み検索 & ページネーション
  rpc CreatePost(CreatePostReq) returns (CreatePostRes); // 投稿を作成
  rpc UpdatePost(UpdatePostReq) returns (UpdatePostRes); // 投稿を更新
  rpc DeletePost(DeletePostReq) returns (DeletePostRes); // 投稿を削除

  rpc GetApplyPostsByUserID(GetApplyPostsByUserIDReq) returns (GetApplyPostsByUserIDRes); // そのユーザーの応募した投稿を取得
  rpc GetApplyPostsByPostID(GetApplyPostsByPostIDReq) returns (GetApplyPostsByPostIDRes); // その投稿の応募情報を取得
  rpc CreateApplyPost(CreateApplyPostReq) returns (CreateApplyPostRes); // ユーザーが投稿に応募する
  rpc DeleteApplyPost(DeleteApplyPostReq) returns (DeleteApplyPostRes); // ユーザーがその投稿の応募を取り消す

  rpc GetPrefecturesByIDs(GetPrefecturesByIDsReq) returns (GetPrefecturesByIDsRes);  // 都道府県を取得
  rpc GetAllPrefecture(GetAllPrefectureReq) returns (GetAllPrefectureRes); // すべての都道府県を取得

  rpc GetFishingSpotTypesByIDs(GetFishingSpotTypesByIDsReq) returns (GetFishingSpotTypesByIDsRes); // 釣り場の種類を取得
  rpc GetAllFishingSpotType(GetAllFishingSpotTypeReq) returns (GetAllFishingSpotTypeRes);  // すべての釣り場の種類を取得

  rpc GetFishTypesByIDs(GetFishTypesByIDsReq) returns (GetFishTypesByIDsRes); // 魚の種類を取得
  rpc GetAllFishType(GetAllFishTypeReq) returns (GetAllFishTypeRes); // すべての魚の種類を取得
}

message Post {
  int64 id = 1;
  string title = 2;
  string content = 3;
  int64 fishing_spot_type_id = 4;
  int64 fish_type_ids = 5;
  int64 prefecture_id = 6;
  string meeting_place_id = 7;
  google.protobuf.Timestamp meeting_time = 8;
  int64 user_id = 9;
  google.protobuf.Timestamp created_at = 10;
  google.protobuf.Timestamp updated_at = 11;
}

message ApplyPost {
  int64 id = 1;
  int64 post_id = 2;
  int64 user_id = 3;
  google.protobuf.Timestamp created_at = 4;
  google.protobuf.Timestamp updated_at = 5;
}

message FishingSpotType {
  int64 id = 1;
  string name = 2;
}

message FishType {
  int64 id = 1;
  string name = 2;
}

message Prefecture {
  int64 id = 1;
  string name = 2;
}

message GetPostByIDReq {
  int64 id = 1 [(validate.rules).int64.gte = 1];
}

message GetPostByIDRes {
  Post post = 1;
}

message GetPostByUserIDReq {
  int64 user_id = 1;
}

message GetPostByUserIDRes {
  Post post = 1;
}

message GetListPostsReq {
  int64 num = 1 [(validate.rules).int64 = {gte:1, lte: 100}]; // created_at DESC
}

message GetListPostsRes {
  repeated Post posts = 1;
}

message CreatePostReq {
  string title = 1 [(validate.rules).string = {min_len: 1, max_len: 20}];
  string content = 2 [(validate.rules).string = {min_len: 1, max_len: 2000}];
  int64 fishing_spot_type = 3;
  repeated int64 fish_types = 4;
  string prefecture = 5;
  string meeting_place = 6;
  google.protobuf.Timestamp meeting_time = 7;
  int64 user_id= 8 [(validate.rules).int64.gte = 1]; // トークンに含まれていたidを受け取る
}

message CreatePostRes {
  Post post = 1;
}

message UpdatePostReq  {
  int64 id = 1 [(validate.rules).int64.gte = 1];
  string title = 2 [(validate.rules).string = {min_len: 1, max_len: 20}];
  string content = 3 [(validate.rules).string = {min_len: 1, max_len: 2000}];
  int64 fishing_spot_type = 4;
  repeated int64 fish_types = 5;
  string prefecture = 6;
  string meeting_place = 7;
  google.protobuf.Timestamp meeting_time = 8;
  int64 user_id= 9 [(validate.rules).int64.gte = 1]; // トークンに含まれていたidを受け取る
}

message UpdatePostRes {
  bool success = 1;
}

message DeletePostReq {
  int64 id = 1 [(validate.rules).int64.gte = 1];
  int64 user_id= 2 [(validate.rules).int64.gte = 1];
}

message DeletePostRes {
  bool success = 1;
}

message GetPrefecturesByIDsReq {
  repeated int64 ids = 1;
}

message GetPrefecturesByIDsRes {
  repeated Prefecture prefectures = 1;
}

message GetAllPrefectureReq {}

message GetAllPrefectureRes {
  repeated Prefecture prefectures = 1;
}

message GetFishingSpotTypesByIDsReq {
  repeated int64 ids = 1;
}

message GetFishingSpotTypesByIDsRes {
  repeated FishingSpotType fishing_spot_types = 1;
}

message GetAllFishingSpotTypeReq {}

message GetAllFishingSpotTypeRes {
  repeated FishingSpotType fishing_spot_types = 1;
}

message GetFishTypesByIDsReq {
  repeated int64 ids = 1;
}

message GetFishTypesByIDsRes {
  repeated FishType fish_types = 1;
}

message GetAllFishTypeReq {}

message GetAllFishTypeRes {
  repeated FishType fish_types = 1;
}

message GetApplyPostsByUserIDReq {
  int64 user_id = 1;
}

message GetApplyPostsByUserIDRes {
  repeated ApplyPost apply_posts = 1;
}

message GetApplyPostsByPostIDReq {
  int64 post_id = 1;
}

message GetApplyPostsByPostIDRes {
  repeated ApplyPost apply_posts = 1;
}

message CreateApplyPostReq {
  int64 post_id = 1 [(validate.rules).int64.gte = 1];
  int64 user_id= 2 [(validate.rules).int64.gte = 1];
}

message CreateApplyPostRes {
  ApplyPost apply_post = 1;
}

message DeleteApplyPostReq {
  int64 id = 1 [(validate.rules).int64.gte = 1];
  int64 user_id = 2 [(validate.rules).int64.gte = 1];
}

message DeleteApplyPostRes {
  bool success = 1;
}

